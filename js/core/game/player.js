// Generated by CoffeeScript 1.3.3
(function() {

  define(["core/game/platform", "core/game/sprite"], function(Platform, Sprite) {
    var Player;
    return Player = (function() {
      var PLATFORM_HEIGHT, PLATFORM_WIDTH, SPEED;

      SPEED = 8;

      PLATFORM_WIDTH = 80;

      PLATFORM_HEIGHT = 20;

      function Player(ctx, src, width, height, x, y) {
        var nbFrame, timeInterval;
        this.ctx = ctx;
        this.width = width;
        this.height = height;
        nbFrame = 1;
        timeInterval = 5;
        this.playerSprite = new Sprite(src, this.width, this.height, nbFrame, timeInterval);
        this.key = new KEvent;
        this.mobileEvents();
        this.score = 0;
        this.x = 0;
        this.y = 0;
        this.isJumping = true;
        this.isFalling = false;
        this.jumpSpeed = 21;
        this.fallSpeed = 0;
        if (x == null) {
          x = this.ctx.width >> 1;
        }
        if (y == null) {
          y = this.ctx.height - this.height;
        }
        this.move(x, y);
      }

      Player.prototype.move = function(x, y) {
        this.x = x;
        this.y = y;
      };

      Player.prototype.mobileEvents = function() {
        var _game, _pressed,
          _this = this;
        _game = document.querySelector("#game");
        _pressed = false;
        _game.ontouchstart = function(e) {
          return _pressed = true;
        };
        _game.ontouchend = function(e) {
          return _pressed = false;
        };
        _game.ontouchmove = function(e) {
          if (!_pressed) {
            return;
          }
          return _this.x = e.clientX - (window.innerWidth / 2 - _this.ctx.width / 2) - 40;
        };
        return _game.onmousemove = function(e) {
          return _this.x = e.clientX - (window.innerWidth / 2 - _this.ctx.width / 2) - 40;
        };
      };

      Player.prototype.start = function() {
        this.isFalling = false;
        this.fallSpeed = 0;
        this.isJumping = true;
        return this.jumpSpeed = 21;
      };

      Player.prototype.randType = function() {
        var i;
        i = ~~(Math.random() * 10);
        if (score > 250) {
          return [0, 0, 0, 0, 1, 1, 1, 1, 2, 2][i];
        }
        if (score > 500) {
          return [0, 0, 1, 1, 1, 1, 1, 1, 1, 2][i];
        }
        if (score > 1000) {
          return [0, 1, 1, 1, 1, 1, 1, 1, 1, 1][i];
        }
        return [0, 0, 0, 0, 0, 0, 1, 1, 2, 2][i];
      };

      Player.prototype.jump = function(platforms) {
        var i, platform, type, x, y;
        if (this.y > this.ctx.height * 0.3) {
          this.move(this.x, this.y - this.jumpSpeed);
        } else {
          if (this.jumpSpeed > 10) {
            this.score++;
          }
          for (i in platforms) {
            platform = platforms[i];
            platform.y += this.jumpSpeed;
            if (platform.y > this.ctx.height) {
              x = ~~(Math.random() * (this.ctx.width - platform.width));
              y = ~~(platform.y - this.ctx.height);
              type = this.randType();
              platforms[i] = new Platform(x, y, platform.width, platform.height, type);
            }
          }
        }
        this.jumpSpeed--;
        if (this.jumpSpeed === 0) {
          this.isJumping = false;
          this.isFalling = true;
          return this.fallSpeed = 1;
        }
      };

      Player.prototype.fall = function(callback) {
        if (this.y < this.ctx.height - this.height) {
          this.move(this.x, this.y + this.fallSpeed);
          return this.fallSpeed++;
        } else {
          if (this.score === 0) {
            return this.start();
          } else {
            return callback();
          }
        }
      };

      Player.prototype.update = function(platforms, callback) {
        if (this.key.pressed("left") && this.x > 0) {
          this.move(this.x - SPEED, this.y);
        }
        if (this.key.pressed("right") && this.x + this.width < this.ctx.width) {
          this.move(this.x + SPEED, this.y);
        }
        if (this.isJumping) {
          this.jump(platforms);
        }
        if (this.isFalling) {
          return this.fall(callback);
        }
      };

      Player.prototype.draw = function() {
        this.playerSprite.anim(this.ctx, this.x, this.y);
        this.ctx.fillStyle = "rgba(0, 0, 0, .42)";
        this.ctx.font = 'Bold 10px Sans-Serif';
        return this.ctx.fillText("SCORE " + this.score, 21, 21);
      };

      return Player;

    })();
  });

}).call(this);
